@page "/fetchdata"
@inject HttpClient Http
@using MediatR
@inject IMediator mediator
@using BlazorComponentsSiblingsCommunication.Features.AddProductToBasket

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if(response?.Success is false)
{
    <div class="alert alert-warning">
        @response?.Message
    </div>
}

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
                <th>Buy</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    <td>
                        <button class="btn btn-success" 
                                @onclick="async() => response = await mediator.Send(new AddToBasketRequest { ProductName = forecast.Summary, ProductPrice = forecast.TemperatureF})"
                                >Add Product</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    AddToBasketResponse response;
    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
